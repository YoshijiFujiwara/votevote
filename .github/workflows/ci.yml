name: CI
on:
  pull_request:
    branches: [develop, master]
  push:
    branches: [develop, master]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./ui
      SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
      SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
    steps:
      - uses: actions/checkout@v2
      # https://github.com/actions/cache/blob/master/examples.md#node---yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('ui/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache node_modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: mykey
      - name: Use NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: yarn install, format, lint
        run: |
          npm install -g yarn
          yarn install --frozen-lockfile
          yarn run format:check
          yarn run lint
        working-directory: ${{ env.working-directory }}
      - name: yarn test
        run: yarn run test -- --coverage
        env:
          CI: true
        working-directory: ${{ env.working-directory }}
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage
          path: ui/coverage
      - name: Build Project
        if: github.event_name == 'push'
        run: yarn run build
        working-directory: ${{ env.working-directory }}
      - name: Upload Build Folder
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: build
          path: ui/build
      - name: ZIP Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          zip -r build.zip ./build
          zip -r coverage.zip ./coverage
        working-directory: ${{ env.working-directory }}
      - name: Create a Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_TOKEN }}
        working-directory: ${{ env.working-directory }}
      - name: Deploy to Staging
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        run: npx surge --project ./build --domain votevote-dev.surge.sh
        working-directory: ${{ env.working-directory }}
      - name: Deploy to Production
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: npx surge --project ./build --domain votevote.surge.sh
        working-directory: ${{ env.working-directory }}
      - name: Upload Coverage Reports
        run: npx codecov
        working-directory: ${{ env.working-directory }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
